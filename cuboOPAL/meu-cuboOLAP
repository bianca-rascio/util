#install.packages("data.cube", repos = paste0("https://", c("jangorecki.gitlab.io/data.cube", "cloud.r-project.org")))
#install.packages("data.table")
#install.packages("rpivotTable")
library(data.table)
library(data.cube)
library(rpivotTable)

#Criando dimensoes
nomes_dimensoes = list(produto = sort(c("TV", "Geladeira", "Laptop", "Smartphone")), ano = as.character(2015:2019), status = sort(c("Em Estoque", "Em Preparação Para Entrega", "Em Transporte", "Devolvido")))
comprimento_dimensoes = sapply(nomes_dimensoes, length)
#Criando elementos aleatorios
set.seed(142)
df_produtos = array(sample(c(rep(NA, 5), 15:190/2), prod(comprimento_dimensoes), TRUE),
                    unname(comprimento_dimensoes),
                    nomes_dimensoes)
# Cria o cubo a partir do array anterior
cubo_prod = as.cube(df_produtos)

# Veja que agora temos um objeto do tipo cubo
class(cubo_prod)

# Imprimindo o cubo
# Observe que temos dimensões e fatos
print(cubo_prod)

# Observe agora os tipos de dados
# Cada dimensão é tratada como um data.table, o que nos permite fazer diversas operações com os dados
str(cubo_prod)

# Usando a função all.equal() podemos comparar o array com o cubo
# As dimensões são as mesmas, mas com o objeto do tipo cubo teremos diversas opções de operações OLAP
all.equal(dim(df_produtos), dim(cubo_prod))
all.equal(dimnames(df_produtos), dimnames(cubo_prod))

# Cria uma fatia
fatia1 = cubo_prod["TV",]
print(fatia1)
as.data.table(fatia1)

# Mostra a dimensão (por isso drop=FALSE)
fatia2 = cubo_prod["TV",,,drop=FALSE]
print(fatia2)
as.data.table(fatia2)

# Cria uma fatia usando duas dimensões
fatia3 = cubo_prod["TV",,"Em Estoque"]
print(fatia3)
as.data.table(fatia3)
# Cria uma fatia com os totais de TV em estoque no ano de 2016
fatia4 = cubo_prod["TV", 2016,"Em Estoque"]
print(fatia4)
as.data.table(fatia4)

# Dice: Vamos quebrar nossa fatia do produto TV em pedaços menores: 
dice1 = cubo_prod["TV",, c("Em Estoque", "Em Preparação Para Entrega", "Em Transporte")]
print(dice1)
as.data.table(dice1)
# Dice2:
dice2 = cubo_prod["TV", c(2016, 2017), c("Em Estoque", "Em Preparação Para Entrega", "Em Transporte")]
print(dice2)
as.data.table(dice2)

# Imagine que seu gerente queira ver o total de produtos por ano, independente do status
 #Funções da família apply(): permite aplicar uma função a um conjunto de elementos. O pacote data.cube possui sua própria função apply, chamada capply (cube apply).
 #No exemplo, aplicamos a função sum() para calcular a soma de todos os valores da junção entre elementos de duas dimensões, produto e ano e formatamos a saída.
format(capply(cubo_prod, c("produto", "ano"), sum))
# Mas podemos alcançar o mesmo resultado do código anterior usando outra função oferecida pelo pacote data.cube, a função rollup. 
 #você vai perceber uma coluna adicional. A função rollup mostra ainda o nível de cada elemento, definindo assim os níveis em que ocorreu a agregação
roll1 = rollup(cubo_prod, MARGIN = c("produto", "ano"), FUN = sum)
format(roll1)
# qual foi a média de produtos com status “Em Estoque” no ano de 2018?
roll2 = rollup(cubo_prod, MARGIN = c("ano", "status"), FUN = mean)
format(roll2)
# qual ano teve o maior número de produtos processados pela empresa?
 #o parâmetro INDEX, especificando o número de níveis em que queremos a agregação, ou seja, qual o nível de detalhamento desejado.
roll3 = rollup(cubo_prod, MARGIN = c("ano","status"), INDEX = 1:1, FUN = sum)
format(roll3)
 
# Pivot: Transformamos linhas em colunas e vice-versa
 #A função capply() calcula os somatórios e formatamos a saída par amostrar o resultado na tela. 
roll4 = capply(cubo_prod, c("ano","produto"), sum)
format(roll4, dcast = TRUE, formula = ano ~ produto)

#Grafico
rpivotTable(Titanic)
#Criando grafico para nossa base de dados
library(rpivotTable)
roll5 = rollup(cubo_prod, c("ano", "status"), FUN = sum, normalize = FALSE)
rpivotTable(roll5, rows = "ano", cols = c("status"), width = "150%", height = "500px")


